# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation template to create a report for AWS Systems Manager Incident Manager and save it on Amazon Amazon S3 using AWS Systems Manager Automation.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Input Parameters"
        Parameters:
          - RunOnSchedule
          - AssociationSchedule
Parameters:
  RunOnSchedule:
    Type: String
    Description: Scheduled the process vs running on-demand.
    Default: false
    AllowedValues:
      - true
      - false
  AssociationSchedule:
    Type: String
    Description: >-
      The cron expression to use for the association in UTC. For more information about this format, see https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html#reference-cron-and-rate-expressions-association.
    Default: "cron(0 2 ? * SUN *)"
Conditions:
  WithSchedule:
    Fn::Equals:
      - Ref: RunOnSchedule
      - true
Resources:
  AWSSystemsManagerAutomationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
      Path: /
      Policies:
        - PolicyName: AWS-Incident-Manager-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ssm-incidents:ListIncidentRecords"
                  - "ssm-incidents:ListRelatedItems"
                Resource: "*"
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${S3Bucket}/*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !GetAtt S3Bucket.Arn
                Effect: Allow
      Tags:
        - Key: cloudformation:logical-id
          Value: AWSSystemsManagerAutomationRole
        - Key: cloudformation:stack-id
          Value: !Ref AWS::StackId
        - Key: cloudformation:stack-name
          Value: !Ref AWS::StackName
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
  SystemsManagerAutomationDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentFormat: YAML
      DocumentType: Automation
      Content:
        description: Systems Manager automation document to generate Incident Manager reporting
        schemaVersion: "0.3"
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          AutomationAssumeRole:
            type: String
            description: "(Required) The Amazon Resource Name (ARN) of the IAM role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to operate this runbook."
          S3BucketName:
            type: String
            description: "(Required) To store the Incident Manager reporting CSV file"
            default: !Ref S3Bucket
        mainSteps:
          - name: IncidentReports
            action: "aws:executeScript"
            inputs:
              Runtime: python3.11
              Handler: lambda_handler
              InputPayload:
                S3bucketname: "{{S3BucketName}}"
                CSVpath: /tmp/IMreport.csv
                HTMLpath: /tmp/IMreport.html
                account_id: "{{global:ACCOUNT_ID}}"
              Script: |-
                import boto3
                import json
                import csv
                import os
                import logging
                from datetime import datetime, date
                import botocore

                # creating service clients
                SSMIncidents = boto3.client('ssm-incidents')
                s3 = boto3.resource('s3')
                s3_client = boto3.client('s3')
                ssm = boto3.client('ssm')

                # set logger
                logger = logging.getLogger()
                logger.setLevel(logging.INFO)

                # Main lambda function that calls all sub functions
                def lambda_handler(event,context):

                    # Declare bucket name and csv path as global variables
                    global S3bucketname, CSVpath, HTMLpath, account_id

                    S3bucketname = event['S3bucketname']
                    CSVpath = event['CSVpath']
                    HTMLpath = event['HTMLpath']
                    account_id = event['account_id']

                    # related_items
                    outputcsv = related_items()

                    # Write filtered incident records to CSV
                    generate_csv(outputcsv, CSVpath)

                    # Write the reports to HTML
                    generate_html(outputcsv, HTMLpath)

                    # generate an s3 object name
                    S3CSVObjectName = generate_report_name("csv")
                    S3HTMLObjectName = generate_report_name("html")

                    # create an s3 object
                    S3Upload(S3bucketname, S3CSVObjectName, CSVpath)
                    S3Upload(S3bucketname, S3HTMLObjectName, HTMLpath)

                    # delete the csv file following the successful upload
                    os.remove(CSVpath)
                    os.remove(HTMLpath)

                    return {
                        "s3_bucket": S3bucketname,
                        "s3_csv_report": S3CSVObjectName,
                        "s3_html_report": S3HTMLObjectName,
                        "status": "success"
                    }

                # List Incident_Records
                def incident_records() -> list:

                    # List Incident Records
                    try:
                        response = SSMIncidents.list_incident_records(
                            filters=[
                                {
                                    'condition': {
                                        'equals': {
                                            'stringValues': [
                                                'RESOLVED',
                                                'OPEN'
                                            ]
                                        }
                                    },
                                    'key': 'status'
                                },
                            ]
                        )
                        incidentrecords = response['incidentRecordSummaries']
                        while "NextToken" in response:
                            response = SSMIncidents.list_incident_records(NextToken = response['NextToken'])
                            incidentrecords.extend(response['incidentRecordSummaries'])
                        return incidentrecords
                    except Exception as err:
                        logging.error(f"Unexpected {err=}, {type(err)=}")
                        raise

                # Filter output
                def related_items() -> list:
                    incidentrecords = incident_records()
                    outputs = []
                    for i in incidentrecords:

                        # Extracting response plan from Incident ARN
                        split_arn = i["arn"].split('/')
                        response_plan = split_arn[-2]

                        # Add a blank for resolved times if the Status is Open
                        if i["status"] != "OPEN":
                            resolved_time = i["resolvedTime"]
                        else:
                            resolved_time = ""

                        # Add a blank if there is no resource_arn
                        resource_arn = i["incidentRecordSource"].get("resourceArn", "")

                        # Time Duration
                        Duration = ""
                        if i["status"] == "RESOLVED" and i["creationTime"] and resolved_time:
                            StartTime = datetime.strptime(str(i["creationTime"]), "%Y-%m-%d %H:%M:%S.%f%z")
                            EndTime = datetime.strptime(str(resolved_time), "%Y-%m-%d %H:%M:%S.%f%z")
                            time_delta = EndTime - StartTime
                            days = time_delta.days
                            hours = time_delta.seconds // 3600
                            minutes = (time_delta.seconds // 60) % 60
                            seconds = time_delta.seconds % 60

                            total_seconds = time_delta.total_seconds()
                            if total_seconds < 60:
                                Duration = f"{seconds}s"
                            elif total_seconds < 3600:
                                Duration = f"{minutes}m {seconds}s"
                            elif total_seconds < 86400:
                                Duration = f"{hours}h {minutes}m {seconds}s"
                            else:
                                Duration = f"{days}d {hours}h {minutes}m {seconds}s"

                        # Call List Related Items API
                        try:
                            response = SSMIncidents.list_related_items(
                                incidentRecordArn=i["arn"]
                            )
                            related_items = response["relatedItems"]

                            while "NextToken" in response:
                                response = SSMIncidents.list_related_items(NextToken = response['NextToken'])
                                related_items.extend(response['relatedItems'])

                            # Allowed Types in related items = "ANALYSIS"|"INCIDENT"|"METRIC"|"PARENT"|"ATTACHMENT"|"OTHER"|"AUTOMATION"|"INVOLVED_RESOURCE"|"TASK"
                            # Allowed values = "arn" | "metricDefinition" | "pagerDutyIncidentDetail" | "url"

                            # Initialize a dictionary to store identifier lists based on their types
                            identifier_mapping = {
                                "PARENT": [],
                                "INVOLVED_RESOURCE": [],
                                "ANALYSIS": [],
                                "OTHER": [],
                                "INCIDENT": [],
                                "AUTOMATION": [],
                                "TASK": [],
                                "ATTACHMENT":[],
                                "METRIC":[]
                            }

                            # Iterate through the related items and append identifier values to respective lists
                            for j in related_items:
                                type = j["identifier"]["type"]
                                values = j["identifier"]["value"]

                                # Check if the value is from pagerDuty and append respective ID with prefix 'PagerDuty Incident ID'
                                if values.get("pagerDutyIncidentDetail"):
                                    identifier_value = "PagerDuty Incident ID " + str(values.get("pagerDutyIncidentDetail").get("id"))

                                # For all other values, append directly
                                else:
                                    identifier_value = values.get("arn") or values.get("url") or values.get("metricDefinition")

                                if identifier_value:
                                    if type in identifier_mapping:
                                        identifier_mapping[type].append(identifier_value)
                                    else:
                                        identifier_mapping["OTHER"].append(identifier_value) # Add the value to OTHER if the type is not recognized

                        except Exception as err:
                            logging.error(f"Unexpected {err=}, {type(err)=}")
                            raise

                        # Convert identifiers from list to string
                        parent_items = ','.join(identifier_mapping.get("PARENT", []))
                        involvedresource_arns = ','.join(identifier_mapping.get("INVOLVED_RESOURCE", []))
                        analysis_arns = ','.join(identifier_mapping.get("ANALYSIS", []))
                        other_items = ','.join(identifier_mapping.get("OTHER", []))
                        related_incidents = ','.join(identifier_mapping.get("INCIDENT", []))
                        automation = ','.join(identifier_mapping.get("AUTOMATION", []))
                        related_tasks = ','.join(identifier_mapping.get("TASK", []))
                        related_attachments = ','.join(identifier_mapping.get("ATTACHMENT", []))
                        related_metrics = ','.join(identifier_mapping.get("METRIC", []))

                        # Get SSM document content and save to S3
                        analysis_urls = []

                        for arn in identifier_mapping["ANALYSIS"]:

                            # Split the ARN and extract the account number
                            arn_parts = arn.split(':')
                            account_number = arn_parts[4] if len(arn_parts) > 4 else None

                            # Save the analysis only if automation runs in the same account as that of analysis arn
                            if account_number == account_id:
                                content = get_analysis_document(arn)
                                if content:
                                    s3_url = save_analysis_to_s3(content, i["title"], arn)
                                    if s3_url:
                                        analysis_urls.append(s3_url)

                        # Join the analysis URLs
                        analysis_urls_str = ','.join(analysis_urls)

                        # Append all the elements to outputs list
                        output = [i["title"], i["arn"], i["impact"], i["status"], response_plan, i["creationTime"], resolved_time, Duration, resource_arn, parent_items, involvedresource_arns, related_incidents, automation, analysis_arns, analysis_urls_str, related_tasks, related_attachments, related_metrics, other_items]
                        outputs.append(output)

                    return outputs

                def get_analysis_document(arn):
                    try:
                        response = ssm.get_document(Name=arn)
                        return response['Content']
                    except Exception as e:
                        print(f"Error getting SSM document for ARN {arn}: {str(e)}")
                        return None

                def save_analysis_to_s3(content, incident_name, analysis_arn):
                    try:
                        # Remove spaces and any special character from Incident Name
                        incident_name_new = ''.join(e for e in incident_name if e.isalnum())

                        # Extract the analysis document ID from the ARN
                        document_id = analysis_arn.split('/')[-1]
                        document_name = f"analysis_summary_{document_id}.txt"

                        # Create the S3 key
                        key = f"analyses/{incident_name_new}/{document_name}"

                        # Parse the JSON content
                        data = json.loads(content)

                        # Extract Incident Summary and Impact from `AWSIncidents-PostIncidentAnalysisTemplate`
                        incident_summary = "Not provided"
                        impact = "Not provided"

                        for section in data.get('template', {}).get('sections', []):
                            if section.get('id') == 'overview':
                                for component in section.get('components', []):
                                    questions = component.get('questions', {})
                                    if questions.get('title') == 'Incident summary':
                                        for question in questions.get('questions', []):
                                            if 'value' in question and 'markdown' in question['value']:
                                                incident_summary = question['value']['markdown'].get('answer', 'Not provided')
                                                break
                                    elif questions.get('title') == 'Impact':
                                        for question in questions.get('questions', []):
                                            if 'value' in question and 'markdown' in question['value']:
                                                impact = question['value']['markdown'].get('answer', 'Not provided')
                                                break

                        # Prepare the content for the text file
                        text_content = f"Incident Summary:\n{incident_summary}\n\nImpact:\n{impact}"

                        # Upload the content to S3
                        s3_client.put_object(Bucket=S3bucketname, Key=key, Body=text_content)

                        # Get bucket region
                        region_id = s3_client.get_bucket_location(Bucket=S3bucketname)['LocationConstraint'] or 'us-east-1'

                        # Generate the S3 URL
                        s3_url = f"https://s3.console.aws.amazon.com/s3/object/{S3bucketname}/{key}?region={region_id}"

                        return s3_url
                    except Exception as e:
                        print(f"Error saving to S3: {str(e)}")
                        return None


                # Write incident records to CSV
                def generate_csv(event_data, file_path):
                    # field names for a csv file
                    fields = ['Title', 'Incident ARN', 'Impact', 'Status', 'Response Plan', 'Start Time', 'Resolved Time', 'Duration', 'Invoked Resource ARN', 'Related Parent Items', 'Related Involved Resources', 'Related Incidents', 'Related Automations', 'Related Analysis', 'Analysis Summary', 'Related Tasks', 'Related Attachments', 'Related Metrics', 'Other Related Items']  # Add more header fields if needed
                    with open(file_path, 'w', newline='', encoding='utf-8') as output_file:
                        # creating a csv writer object and write rows
                        try:
                            csvwriter = csv.writer(output_file, delimiter=',', )
                            csvwriter.writerow(fields)
                            csvwriter.writerows(event_data)
                        except Exception as err:
                            logging.error(f"Unexpected {err=}, {type(err)=}")
                            raise

                # Write incident records to HTML
                def generate_html(event_data, file_path):
                    # HTML template
                    html_template = """
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Incident Report</title>
                        <style>
                            table {{
                                border-collapse: collapse;
                                width: 100%;
                            }}
                            th, td {{
                                border: 1px solid #ddd;
                                padding: 8px;
                                text-align: left;
                            }}
                            th {{
                                background-color: #f2f2f2;
                            }}
                            tr:nth-child(even) {{
                                background-color: #f9f9f9;
                            }}
                            .summary-link {{
                                background-color: #ffff00;
                                color: #0000ff;
                                text-decoration: underline;
                                font-weight: bold;
                                padding: 2px 5px;
                            }}
                        </style>
                    </head>
                    <body>
                        <h1>Incident Report</h1>
                        <p>Generated on: {generation_time}</p>
                        <table>
                            <tr>
                                <th>Title</th>
                                <th>Incident ARN</th>
                                <th>Impact</th>
                                <th>Status</th>
                                <th>Response Plan</th>
                                <th>Start Time</th>
                                <th>Resolved Time</th>
                                <th>Duration</th>
                                <th>Invoked Resource ARN</th>
                                <th>Related Parent Items</th>
                                <th>Related Involved Resources</th>
                                <th>Related Incidents</th>
                                <th>Related Automations</th>
                                <th>Related Analysis</th>
                                <th>Analysis Summary</th>
                                <th>Related Tasks</th>
                                <th>Related Attachments</th>
                                <th>Related Metrics</th>
                                <th>Other Related Items</th>
                            </tr>
                            {table_rows}
                        </table>
                    </body>
                    </html>
                    """

                    try:
                        rows = []
                        for row in event_data:
                            if row[14]:
                                summary_cell = f'<a href="{row[14]}" class="summary-link" target="_blank">Click for Analysis Summary</a>'
                            else:
                                summary_cell = "N/A"

                            formatted_row = [f"<td>{cell}</td>" for cell in row[:14]] + [f"<td>{summary_cell}</td>"] + [f"<td>{cell}</td>" for cell in row[15:]]
                            rows.append(f"<tr>{''.join(formatted_row)}</tr>")

                        table_rows = "\n".join(rows)
                        generation_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                        html_content = html_template.format(table_rows=table_rows, generation_time=generation_time)

                        with open(file_path, 'w', encoding='utf-8') as output_file:
                            output_file.write(html_content)

                        print(f"HTML report generated: {file_path}")

                    except Exception as err:
                        logging.error(f"Unexpected {err=}, {type(err)=}")
                        raise

                # Generate report name
                def generate_report_name(report_type: str) -> str:
                    today = date.today()
                    current_time = datetime.now().strftime("%H:%M:%S")
                    return f"reports/{report_type}/IMReport-{today}-{current_time} UTC.{report_type}"

                # Upload CSV to S3
                def S3Upload(S3bucketName, object_key, file_path):
                    logging.info(f"uploading {object_key} to {S3bucketName}")
                    try:
                        s3.meta.client.upload_file(
                            Filename=file_path,
                            Bucket=S3bucketName,
                            Key=object_key,
                            ExtraArgs={'ACL': 'bucket-owner-full-control'}
                        )
                    except Exception as err:
                        logging.error(f"Unexpected {err=}, {type(err)=}")
                        raise
        outputs:
          - IncidentReports.OutputPayload
      Tags:
        - Key: cloudformation:logical-id
          Value: SystemsManagerAutomationDocument
        - Key: cloudformation:stack-id
          Value: !Ref AWS::StackId
        - Key: cloudformation:stack-name
          Value: !Ref AWS::StackName
  StateManagerAssociation:
    Condition: WithSchedule
    Type: AWS::SSM::Association
    Properties:
      AssociationName: "Report-generator-for-Incident-Manager"
      Name: !Ref SystemsManagerAutomationDocument
      ScheduleExpression: !Ref AssociationSchedule
      ApplyOnlyAtCronInterval: true
      Parameters:
        AutomationAssumeRole:
          - !GetAtt AWSSystemsManagerAutomationRole.Arn
        S3BucketName:
          - !Ref S3Bucket
Outputs:
  S3Bucket:
    Description: S3 bucket to store AWS Systems Manager Incident Manager report.
    Value: !Ref S3Bucket
  AWSSystemsManagerAutomationRole:
    Description: AWS Systems Manager Automation Execution Role
    Value: !Ref AWSSystemsManagerAutomationRole
  SystemsManagerAutomationDocument:
    Description: Systems Manager Automation Document to generate the report.
    Value: !Ref SystemsManagerAutomationDocument
  StateManagerAssociation:
    Condition: WithSchedule
    Description: Systems Manager state manager association to schedule the generation of the report.
    Value: !Ref StateManagerAssociation
